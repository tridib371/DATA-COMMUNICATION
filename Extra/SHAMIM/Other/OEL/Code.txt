% define parameters
fs = 4001; % sampling frequency
fc = 10; % carrier frequency
bits1 = [0 0 0 0 1 1 1 1 ]; % binary data for signal 1
bits2 = [1 1 1 1 1 1 1 1 ]; % binary data for signal 2
amp1 = 2; % amplitude of carrier signal for bit 1 of signal 1
amp2 = 1.5; % amplitude of carrier signal for bit 1 of signal 2
amp0 = 0; % amplitude of carrier signal for bit 0
duration = max(length(bits1), length(bits2))/fc; % duration of signal

% create carrier signal
t = 0:1/fs:duration;
carrier = sin(2*pi*fc*t);

% create ASK modulated signals for signal 1
signal1 = zeros(1, length(t));
for i = 1:length(bits1)
    if bits1(i) == 1
        signal1((i-1)*fs/fc+1:i*fs/fc) = amp1 * carrier((i-1)*fs/fc+1:i*fs/fc);
    else
        signal1((i-1)*fs/fc+1:i*fs/fc) = amp0 * carrier((i-1)*fs/fc+1:i*fs/fc);
    end
end

% create ASK modulated signals for signal 2
signal2 = zeros(1, length(t));
for i = 1:length(bits2)
    if bits2(i) == 1
        signal2((i-1)*fs/fc+1:i*fs/fc) = amp2 * carrier((i-1)*fs/fc+1:i*fs/fc);
    else
        signal2((i-1)*fs/fc+1:i*fs/fc) = amp0 * carrier((i-1)*fs/fc+1:i*fs/fc);
    end
end

% combine signals into composite signal
composite_signal = signal1 + signal2;

% plot signals
figure;

% plot bit stream 1
subplot(3,2,1);
stairs(0:length(bits1)-1, bits1, 'LineWidth', 2);
ylim([-0.5 1.5]);
xlabel('Bit Index');
grid on;
ylabel('Amplitude');
title('Bit Stream 1');

% plot ASK modulated signal for signal 1
subplot(3,2,2);
plot(t, signal1);
ylim([-2.5 2.5]);
grid on;
xlabel('Time (s)');
ylabel('Amplitude');
title('ASK Modulated Signal 1');

% plot bit stream 2
subplot(3,2,3);
stairs(0:length(bits2)-1, bits2, 'LineWidth', 2);
grid on;
ylim([-0.5 1.5]);
xlabel('Bit Index');
ylabel('Amplitude');
title('Bit Stream 2');

% plot ASK modulated signal for signal 2
subplot(3,2,4);
plot(t, signal2);
grid on;
ylim([-2.5 2.5]);
xlabel('Time (s)');
ylabel('Amplitude');
title('ASK Modulated Signal 2');

% Step 2: Multiplex the Analog Signals Using FDM (Frequency Division Multiplexing)
% Mixing the ASK modulated signals with different carrier frequencies
Cm1 = 1; % Amplitude of First Carrier Signal
Cm2 = 1; % Amplitude of Second Carrier Signal

fc1 = 100; % Frequency of First Carrier Signal
fc2 = 170; % Frequency of Second Carrier Signal

% Mixing ASK modulated signals with carriers
composite_signal = amp1 * signal1 .* (Cm1 * cos(2*pi*fc1*t)) + amp2 * signal2 .* (Cm2 * cos(2*pi*fc2*t));

% Plot composite signal after FDM
subplot(3, 1, 3);
plot(t, composite_signal);
grid on;
xlabel('Time (s)');
ylabel('Amplitude');
title('Composite Signal after FDM');

% Step 3: Demultiplex the Composite Analog Signal
% Pass the composite signal through bandpass filters
[num1, den1] = butter(5, [(fc1-fc1/10)/(fs/2), (fc1+fc1/10)/(fs/2)]);
bpf1 = filter(num1, den1, composite_signal);
[num2, den2] = butter(5, [(fc2-fc2/10)/(fs/2), (fc2+fc2/10)/(fs/2)]);
bpf2 = filter(num2, den2, composite_signal);

% Demodulate the composite signals
rec1 = 2 * bpf1 .* (Cm1 * cos(2*pi*fc1*t));
rec2 = 2 * bpf2 .* (Cm2 * cos(2*pi*fc2*t));

% Pass the demodulated signals through lowpass filters
[num4, den4] = butter(5, (fc1/10)/(fs/2));
rec1 = filter(num4, den4, rec1);
[num5, den5] = butter(5, (fc2/10)/(fs/2));
rec2 = filter(num5, den5, rec2);

% Plot the received signals in the time domain
figure;
subplot(2,1,1);
plot(t, rec1);
grid on;
xlabel('Time (s)');
ylabel('Amplitude');
title('Received Signal 1 in Time Domain');

subplot(2,1,2);
plot(t, rec2);
grid on;
xlabel('Time (s)');
ylabel('Amplitude');
title('Received Signal 2 in Time Domain');

% Step 4: Binary Demodulation
threshold = 1; % Adjust the threshold as needed

% Demodulate the received signals to retrieve binary bits
received_bits1 = zeros(1, length(bits1));
received_bits2 = zeros(1, length(bits2));

for i = 1:length(bits1)
    % Compare the demodulated signal with the threshold for bit 1
    if max(rec1((i-1)*fs/fc+1:i*fs/fc)) > threshold
        received_bits1(i) = 1;
    else
        received_bits1(i) = 0;
    end
    
    % Compare the demodulated signal with the threshold for bit 2
    if max(rec2((i-1)*fs/fc+1:i*fs/fc)) > threshold
        received_bits2(i) = 1;
    else
        received_bits2(i) = 0;
    end
end

% Display the received bits
disp('Received Bits 1:');
disp(received_bits1);

disp('Received Bits 2:');
disp(received_bits2);
