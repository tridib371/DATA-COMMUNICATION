% Define frequency ranges for voice channels (assuming they are the same)
freq_range_1 = [30e3, 60e3]; % Frequency range for first set
freq_range_2 = [70e3, 100e3]; % Frequency range for second set
freq_range_3 = [110e3, 140e3]; % Frequency range for third set

% Sample rate for ADC
sample_rate = 1e6; % Choose an appropriate sample rate

% Time duration and time vector
duration = 1; % Duration in seconds
t = linspace(0, duration, sample_rate * duration);

% Generate sinusoidal signals for each voice channel - First set
signal_1 = sin(2*pi*(freq_range_1(1) + (freq_range_1(2)-freq_range_1(1))*rand(1))*t); % First set signal
signal_2 = sin(2*pi*(freq_range_2(1) + (freq_range_2(2)-freq_range_2(1))*rand(1))*t); % Second set signal
signal_3 = sin(2*pi*(freq_range_3(1) + (freq_range_3(2)-freq_range_3(1))*rand(1))*t); % Third set signal

% Multiplexing the first set using FDM
multiplexed_signal_1 = signal_1 + signal_2 + signal_3; % FDM for first set

% Apply ADC (Analog-to-Digital Conversion) to convert to digital signal
bits = 8; % Define the number of bits for quantization
quantized_signal_1 = round((2^bits - 1) * (multiplexed_signal_1 / max(abs(multiplexed_signal_1)))); % Quantize the signal

% Plot digital signal - First Set
figure;
subplot(2, 1, 1);
stem(quantized_signal_1);
title('Digital Signal - First Set');
xlabel('Sample');
ylabel('Quantized Value');

% Generating sinusoidal signals for the second set
signal_4 = sin(2*pi*(freq_range_1(1) + (freq_range_1(2)-freq_range_1(1))*rand(1))*t); % Fourth set signal
signal_5 = sin(2*pi*(freq_range_2(1) + (freq_range_2(2)-freq_range_2(1))*rand(1))*t); % Fifth set signal
signal_6 = sin(2*pi*(freq_range_3(1) + (freq_range_3(2)-freq_range_3(1))*rand(1))*t); % Sixth set signal

% Multiplexing the second set using FDM
multiplexed_signal_2 = signal_4 + signal_5 + signal_6; % FDM for second set

% Apply ADC (Analog-to-Digital Conversion) to convert the second set to digital signal
quantized_signal_2 = round((2^bits - 1) * (multiplexed_signal_2 / max(abs(multiplexed_signal_2)))); % Quantize the signal

% Plot digital signal - Second Set
subplot(2, 1, 2);
stem(quantized_signal_2);
title('Digital Signal - Second Set');
xlabel('Sample');
ylabel('Quantized Value');

% Multiplexing the digital signals using TDM
tdm_signal = [quantized_signal_1; quantized_signal_2]; % Combine the digital signals using TDM
c_tdm_signal = reshape(tdm_signal.', 1, []);

% Plotting the TDM signal
figure;
stem(c_tdm_signal);
title('Combined TDM Signal');
xlabel('Sample');
ylabel('Quantized Value');