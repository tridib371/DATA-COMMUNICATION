A=2;
B=1;
C=4;
D=4;
E=9;
F=9;
G=8;
H=2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Analog to Digital Conversion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

time_duration = 0.2;
%% Analog-like signal's representation
% Analog signal generation is not possible in MATLAB

a1 = F + 1;
a2 = F + 3;
a3 = F + 2;
a4 = F + 4;
f1 = G + 5;
f2 = G + 7;
f3 = G + 1;
f4 = G + 2;

a=[a1 a2 a3];
f=[f1 f2 f3];

analog_t = 0:0.0001:time_duration;

analog_sig = a1*sin(2*pi*f1*analog_t) + a2*cos(2*pi*f2*analog_t) + a3*sin(2*pi*f3*analog_t) + a4*sin(2*pi*f4*analog_t);
figure
hold on
subplot(1,2,1)
plot(analog_t, analog_sig,'linewidth',1.5)
grid on
xlabel('time in seconds')
ylabel('amplitude in volts')
title('analog signal')

%% Sampling Frequency
fs = 250;
ts = 1/fs;

%% Sampling
samp_t = 0:1/fs:time_duration;
samp_sig = a1*sin(2*pi*f1*samp_t) +a2*cos(2*pi*f2*samp_t) + a3*sin(2*pi*f3*samp_t) + a4*sin(2*pi*f4*samp_t);
hold on
subplot(1,2,2)
plot(samp_t, samp_sig,'linewidth',1.5)
grid on
xlabel('time in seconds')
ylabel('amplitude in volts')
title(['sampled signal for ',num2str(fs),' Hz sampling frequency'])

%% Levels for Quantization
L = 8;

%% Quantizing
delta = (max(samp_sig) - min(samp_sig))/(L-1); %step size
quant_sig = min(samp_sig) + round((samp_sig-min(samp_sig))/delta)*delta; % quantized signal
figure
subplot(1,2,1)
plot(samp_t, samp_sig,'linewidth',1.5)
grid on
xlabel('time in seconds')
ylabel('amplitude in volts')
title('sampled signal')
subplot(1,2,2)
plot(samp_t, quant_sig,'linewidth',1.5);
xlabel('time')
ylabel('amplitude')
title('quantized samples')

%% Number of Bits/Sample
nb = log2(L);

%% Encoding
i = round((samp_sig-min(samp_sig))/delta); % index for encoding
dig_data_matrix = dec2bin(i,nb); % encoded binary bits are as a matrix here
dig_data = reshape(dig_data_matrix',1,[]); % encoded binary bits are as an array here
disp(['The index values for encoding from quantization of the sampled signal are:',num2str(i)])
disp(['The converted bits from the input analog signal are: ',num2str(dig_data)])